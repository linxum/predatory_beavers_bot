import csv

import telebot
from telebot import types
import schedule
import time
import os
from multiprocessing.context import Process

import mailing
import tokens
import vkParser
import schedule_games
import players
import resume
import gift
from keyboard import keys_admin, keys_menu, key_cancel

bot = telebot.TeleBot(tokens.tg_token())
channel_id = "@predatorybeaver"


@bot.message_handler(commands=['start'])
def start(message):
    mailing.subscribe(message.chat.id)
    if not is_admin(channel_id, message.from_user.id):
        if not is_subscribed(channel_id, message.from_user.id):
            key_subscribe = types.ReplyKeyboardMarkup(True, True)
            key_subscribe.add("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")

            get_link = types.InlineKeyboardMarkup()
            get_link.add(types.InlineKeyboardButton(text="PREDATORY BEAVERS", url="https://t.me/predatorybeaver"))

            bot.send_message(message.chat.id, "–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª", reply_markup=get_link)
            bot.send_message(message.chat.id, "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!", reply_markup=key_subscribe)
        else:
            bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç!", reply_markup=keys_menu)
    else:
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω", reply_markup=keys_admin)


def newPost(message):
    domain = "beavers_esports"

    post_text = vkParser.get_post_text(domain)
    pngs = vkParser.get_post_photos(domain)
    if len(pngs) == 1:
        photo = open(pngs[0], 'rb')
        bot.send_photo(message.chat.id, photo, caption=post_text)
        photo.close()
    elif len(pngs) > 1:
        bot.send_media_group(message.chat.id, [types.InputMediaPhoto(open(png, "rb"), caption=post_text) for png in pngs])
    vkParser.delete_files(pngs)

    urls_video = vkParser.get_post_video(domain)
    if len(urls_video) > 0:
        for url in urls_video:
            bot.send_message(message.chat.id, url)


@bot.message_handler(commands=['admin'])
def set_admin(message):
    if is_admin(channel_id, message.from_user.id):
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω!", reply_markup=keys_admin)

@bot.message_handler(commands=['user'])
def set_user(message):
    if is_admin(channel_id, message.from_user.id):
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, —é–∑–µ—Ä!", reply_markup=keys_menu)

@bot.message_handler(commands=['unsubscribe'])
def admin_unsubscribe(message):
    if is_admin(channel_id, message.from_user.id):
        mailing.unsubscribe(message.chat.id, bot)

def cancel(message):
    bot.clear_step_handler_by_chat_id(message.chat.id)
    if is_admin(channel_id, message.from_user.id):
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–∞", reply_markup=keys_admin)
    else:
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–∞", reply_markup=keys_menu)

def is_subscribed(chat_id, user_id):
    try:
        member = bot.get_chat_member(chat_id, user_id)
        if member.status == 'left':
            return False
        else:
            return True
    except telebot.apihelper.ApiTelegramException as e:
        if e.result_json['description'] == 'Bad Request: user not found':
            return False


def is_admin(chat_id, user_id):
    chat_member = bot.get_chat_member(channel_id, user_id)
    return chat_member.status in ['creator', 'administrator']


@bot.message_handler(content_types=['text'])
def keys(message):
    match message.text:
        case "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
            start(message)
        case "–ù–∞—à–∏ —Å–æ—Å—Ç–∞–≤—ãüë•":
            games = players.get_games()
            keys_games = types.InlineKeyboardMarkup()
            for game in games:
                keys_games.add(types.InlineKeyboardButton(text=game, callback_data=game))
            keys_games.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="cancel"))
            bot.send_message(message.chat.id, "–ö–∞–∫–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=keys_games)
        case "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç—á–µ–πüóì":
            schedule_games.get_message(bot, message)
        case "–°–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–ºüíå":
            msg = bot.send_message(message.chat.id, "üî• –ù–∞—à –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ª—é–±–æ–º—É —á–µ–ª–æ–≤–µ–∫—É –æ—Å—Ç–∞–≤–∏—Ç—å –ø–∞—Ä—É –ø—Ä–∏—è—Ç–Ω—ã—Ö, –Ω–∞–ø—É—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ —Å–±–æ—Ä–Ω—ã—Ö\n\n–ù–∞–ø–∏—à–∏ –∏—Ö –∑–¥–µ—Å—å!", reply_markup=key_cancel)
            bot.register_next_step_handler(msg, gift.add, bot)
        case "–í—Å—Ç—É–ø–∏—Ç—å –≤ –•–ëü¶´":
            resume.add_resume(message, bot)
        case "–û –Ω–∞—Åüìå":
            bot.send_message(message.chat.id, ".")
        case "–ù–∞–∑–∞–¥":
            cancel(message)

        case "–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–∞–≤":
            if is_admin(channel_id, message.from_user.id):
                keys_player = types.ReplyKeyboardMarkup(True, True)
                keys_player.add("–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞", "–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞", "–ù–∞–∑–∞–¥")
                bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏", reply_markup=keys_player)
        case "–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞":
            if is_admin(channel_id, message.from_user.id):
                players.add(message, bot)
        case "–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞":
            if is_admin(channel_id, message.from_user.id):
                players.remove_player(message, bot)
        case "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
            if is_admin(channel_id, message.from_user.id):
                keys_games = types.ReplyKeyboardMarkup(True, True)
                keys_games.add("–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç—á", "–£–¥–∞–ª–∏—Ç—å –º–∞—Ç—á", "–ù–∞–∑–∞–¥")
                bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏", reply_markup=keys_games)
        case "–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç—á":
            if is_admin(channel_id, message.from_user.id):
                schedule_games.add_enemy(message, bot)
        case "–£–¥–∞–ª–∏—Ç—å –º–∞—Ç—á":
            if is_admin(channel_id, message.from_user.id):
                schedule_games.remove_games(message, bot)
        case "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç":
            if is_admin(channel_id, message.from_user.id):
                newPost(message)
        case "–ü–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏":
            if is_admin(channel_id, message.from_user.id):
                resume.get(message, bot)
        case "–ü–æ–∂–µ–ª–∞–Ω–∏—è":
            if is_admin(channel_id, message.from_user.id):
                gift.get(message, bot)


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    if call.data == "cancel":
        cancel(call.message)
    elif call.data == "resume_yes":
        bot.send_message(-1002120616869, call.message.text)
        resume.remove(resume.get_name(call.message.text))
        bot.edit_message_text("–£—Å–ø–µ—à–Ω–æ", chat_id=call.message.chat.id, message_id=call.message.message_id)
    elif call.data == "resume_no":
        resume.remove(resume.get_name(call.message.text))
        bot.edit_message_text("–£—Å–ø–µ—à–Ω–æ", chat_id=call.message.chat.id, message_id=call.message.message_id)
    elif call.data == "gift_yes":
        gift.reply_to(call.message, bot)
        bot.edit_message_text("–£—Å–ø–µ—à–Ω–æ", chat_id=call.message.chat.id, message_id=call.message.message_id)
    elif call.data == "gift_no":
        gift.remove(call.message)
        bot.edit_message_text("–£—Å–ø–µ—à–Ω–æ", chat_id=call.message.chat.id, message_id=call.message.message_id)
    else:
        gamers = players.get(call.data)
        msg = f"üî• –•–∏—â–Ω—ã–µ –±–æ–±—Ä—ã –≤ {call.data} –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∏–≥—Ä–æ–∫–∏:\n\n"
        for gamer in gamers:
            msg += f"- {gamer['name']}\n–ö–æ–Ω—Ç–∞–∫—Ç—ã: "
            if gamer['url'] != "":
                msg += f"{gamer['url']}\n\n"
            else:
                msg += "–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n\n"
        if call.data in os.listdir("players_img/"):
            bot.send_media_group(call.message.chat.id, [types.InputMediaPhoto(open(f"players_img/{call.data}/{file}", "rb"), caption = msg if file == '1.jpg' else '') for file in os.listdir(f"players_img/{call.data}")])
        else:
            bot.send_message(call.message.chat.id, msg, disable_web_page_preview=True)



# schedule.every().day.at("09:00").do(mailing.morning_notification, bot)
# schedule.every().day.at("00:00").do(schedule_games.auto_remove)
#
#
# class ScheduleMessage():
#
#   def try_send_schedule():
#     while True:
#       schedule.run_pending()
#       time.sleep(1)
#
#   def start_process():
#     p1 = Process(target=ScheduleMessage.try_send_schedule, args=())
#     p1.start()
#
#
# if __name__ == '__main__':
#     ScheduleMessage.start_process()
#     try:
#         # keep_alive()
#         bot.polling(none_stop=True)
#     except:
#         pass
bot.polling()

# TODO: –¥–æ–±–∞–≤–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ [id...|]

# TODO: –∑–∞–ª–∏—Ç—å –Ω–∞ –Ω–æ—Ä–º —Å–µ—Ä–≤–µ—Ä
